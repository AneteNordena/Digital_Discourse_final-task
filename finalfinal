# this is the real final-final file


{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assessment: course portfolio. Students are\n",
    "# demanded to select and analyse texts from a\n",
    "# variety of genres, and present your analysis\n",
    "# confidently and effectively to others with your\n",
    "# own critical interpretation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# useful libraries - you may not need all\n",
    "# add your own as needed\n",
    "# import os\n",
    "# from pathlib import Path\n",
    "# import json\n",
    "# from collections import Counter\n",
    "# import requests\n",
    "# import pandas as pd\n",
    "# import nltk\n",
    "# from bs4 import BeautifulSoup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1 - 40% of project grade\n",
    "###  Prepare and perform preliminary analysis on plain text file(s) (any language, but English will be slightly easier)\n",
    "* Easiest would be .txt file(s), but .CSV, .TSV files can also be considered text files\n",
    "* Text file can contain texts from digital discourse(examples: twitter, reddit, forums, advertisements, movie scripts, etc)\n",
    "* Preparation should contain cleaning of stop words as a minimum\n",
    "* Analysis as a minimum should produce the most commonly used terms\n",
    "* Your own critical interpretation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert your own work here for Task 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your own conclusions for task 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 2 - 40% of project grade\n",
    "### Prepare and perform preliminary analysis on a JSON file (technically it is also a text file but more structured)\n",
    "* JSON file can contain texts from online communities(online communities(twitter, reddit, forums, etc, advertisements, any type of digital discourse really)\n",
    "* As part of task JSON file should be transformed into a table like format and saved\n",
    "* hint: Pandas makes transformation into table like format easy for some JSON files\n",
    "* https://stackabuse.com/reading-and-writing-json-files-in-python-with-pandas/\n",
    "* Each entry (row ) should have a column containing key terms for that entry\n",
    "* Other possible columns would be date of creation, source, username, etc\n",
    "* Your own critical interpretation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert your own work here for Task 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your own conclusions for task 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 3 - 30% of project grade\n",
    "### Create your own digital discourse data source - pick ONE of the choices\n",
    "\n",
    "#### Choice 1 - API access:\n",
    "* discourse data can obtained by either using API access (most major discourse providers(instagram, reddit, etc) provide decent APIs)\n",
    "* https://praw.readthedocs.io/en/latest/\n",
    "* https://rapidapi.com/blog/instagram-api-python/\n",
    "* almost any big service will have API access - most will require you to register to obtain your API key\n",
    "* result can be saved in format(s) of your choice (txt,json,csv, xlsx, sqlite, any format)\n",
    "\n",
    "#### Choice 2 - Web Scraping:\n",
    "* alternative would be web scraping with requests/Beautiful Soup and/or Pandas(remember to play nice and not overload the site with your requests)\n",
    "* https://towardsdatascience.com/a-guide-to-scraping-html-tables-with-pandas-and-beautifulsoup-7fc24c331cf7\n",
    "* result can be saved in format(s) of your choice (txt,json,csv, xlsx, sqlite, any format)\n",
    "\n",
    "\n",
    "##### Note: You can use this data in task1 and/or task2 if you wish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# insert your own work here for Task 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your own conclusions for task 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project Grade = 40+40+30 = 110%? Max grade still will be 10 :)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
